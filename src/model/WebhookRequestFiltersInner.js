/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebhookRequestFiltersInner model module.
 * @module model/WebhookRequestFiltersInner
 * @version 1.0.4
 */
class WebhookRequestFiltersInner {
    /**
     * Constructs a new <code>WebhookRequestFiltersInner</code>.
     * A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [event](/reference/events)A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [event](/reference/events) A set of filters to specify a whitelist for what types of events will be delivered.
     * @alias module:model/WebhookRequestFiltersInner
     */
    constructor() { 
        
        WebhookRequestFiltersInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebhookRequestFiltersInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookRequestFiltersInner} obj Optional instance to populate.
     * @return {module:model/WebhookRequestFiltersInner} The populated <code>WebhookRequestFiltersInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookRequestFiltersInner();

            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('resource_subtype')) {
                obj['resource_subtype'] = ApiClient.convertToType(data['resource_subtype'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.
 * @member {String} resource_type
 */
WebhookRequestFiltersInner.prototype['resource_type'] = undefined;

/**
 * The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.
 * @member {String} resource_subtype
 */
WebhookRequestFiltersInner.prototype['resource_subtype'] = undefined;

/**
 * The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [event](/reference/events) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.
 * @member {String} action
 */
WebhookRequestFiltersInner.prototype['action'] = undefined;

/**
 * *Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type `changed`
 * @member {Array.<String>} fields
 */
WebhookRequestFiltersInner.prototype['fields'] = undefined;






export default WebhookRequestFiltersInner;

