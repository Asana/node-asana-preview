/**
 * Asana
 * This is the interface for interacting with the Asana platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomFieldCompact from './CustomFieldCompact';
import ProjectBriefCompact from './ProjectBriefCompact';
import ProjectTemplateCompact from './ProjectTemplateCompact';
import TeamCompact from './TeamCompact';
import UserCompact from './UserCompact';

/**
 * The ProjectResponseAllOf model module.
 * @module model/ProjectResponseAllOf
 * @version 1.0.0
 */
class ProjectResponseAllOf {
    /**
     * Constructs a new <code>ProjectResponseAllOf</code>.
     * @alias module:model/ProjectResponseAllOf
     */
    constructor() { 
        
        ProjectResponseAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectResponseAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectResponseAllOf} obj Optional instance to populate.
     * @return {module:model/ProjectResponseAllOf} The populated <code>ProjectResponseAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectResponseAllOf();

            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [CustomFieldCompact]);
            }
            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Boolean');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Date');
            }
            if (data.hasOwnProperty('completed_by')) {
                obj['completed_by'] = ApiClient.convertToType(data['completed_by'], UserCompact);
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = ApiClient.convertToType(data['followers'], [UserCompact]);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], UserCompact);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], TeamCompact);
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('permalink_url')) {
                obj['permalink_url'] = ApiClient.convertToType(data['permalink_url'], 'String');
            }
            if (data.hasOwnProperty('project_brief')) {
                obj['project_brief'] = ApiClient.convertToType(data['project_brief'], ProjectBriefCompact);
            }
            if (data.hasOwnProperty('created_from_template')) {
                obj['created_from_template'] = ApiClient.convertToType(data['created_from_template'], ProjectTemplateCompact);
            }
        }
        return obj;
    }


}

/**
 * Array of Custom Fields.
 * @member {Array.<module:model/CustomFieldCompact>} custom_fields
 */
ProjectResponseAllOf.prototype['custom_fields'] = undefined;

/**
 * True if the project is currently marked complete, false if not.
 * @member {Boolean} completed
 */
ProjectResponseAllOf.prototype['completed'] = undefined;

/**
 * The time at which this project was completed, or null if the project is not completed.
 * @member {Date} completed_at
 */
ProjectResponseAllOf.prototype['completed_at'] = undefined;

/**
 * The user that marked this project complete, or null if the project is not completed.
 * @member {module:model/UserCompact} completed_by
 */
ProjectResponseAllOf.prototype['completed_by'] = undefined;

/**
 * Array of users following this project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project.
 * @member {Array.<module:model/UserCompact>} followers
 */
ProjectResponseAllOf.prototype['followers'] = undefined;

/**
 * The current owner of the project, may be null.
 * @member {module:model/UserCompact} owner
 */
ProjectResponseAllOf.prototype['owner'] = undefined;

/**
 * @member {module:model/TeamCompact} team
 */
ProjectResponseAllOf.prototype['team'] = undefined;

/**
 * The icon for a project.
 * @member {module:model/ProjectResponseAllOf.IconEnum} icon
 */
ProjectResponseAllOf.prototype['icon'] = undefined;

/**
 * A url that points directly to the object within Asana.
 * @member {String} permalink_url
 */
ProjectResponseAllOf.prototype['permalink_url'] = undefined;

/**
 * @member {module:model/ProjectBriefCompact} project_brief
 */
ProjectResponseAllOf.prototype['project_brief'] = undefined;

/**
 * @member {module:model/ProjectTemplateCompact} created_from_template
 */
ProjectResponseAllOf.prototype['created_from_template'] = undefined;





/**
 * Allowed values for the <code>icon</code> property.
 * @enum {String}
 * @readonly
 */
ProjectResponseAllOf['IconEnum'] = {

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "board"
     * @const
     */
    "board": "board",

    /**
     * value: "timeline"
     * @const
     */
    "timeline": "timeline",

    /**
     * value: "calendar"
     * @const
     */
    "calendar": "calendar",

    /**
     * value: "rocket"
     * @const
     */
    "rocket": "rocket",

    /**
     * value: "people"
     * @const
     */
    "people": "people",

    /**
     * value: "graph"
     * @const
     */
    "graph": "graph",

    /**
     * value: "star"
     * @const
     */
    "star": "star",

    /**
     * value: "bug"
     * @const
     */
    "bug": "bug",

    /**
     * value: "light_bulb"
     * @const
     */
    "light_bulb": "light_bulb",

    /**
     * value: "globe"
     * @const
     */
    "globe": "globe",

    /**
     * value: "gear"
     * @const
     */
    "gear": "gear",

    /**
     * value: "notebook"
     * @const
     */
    "notebook": "notebook",

    /**
     * value: "computer"
     * @const
     */
    "computer": "computer",

    /**
     * value: "check"
     * @const
     */
    "check": "check",

    /**
     * value: "target"
     * @const
     */
    "target": "target",

    /**
     * value: "html"
     * @const
     */
    "html": "html",

    /**
     * value: "megaphone"
     * @const
     */
    "megaphone": "megaphone",

    /**
     * value: "chat_bubbles"
     * @const
     */
    "chat_bubbles": "chat_bubbles",

    /**
     * value: "briefcase"
     * @const
     */
    "briefcase": "briefcase",

    /**
     * value: "page_layout"
     * @const
     */
    "page_layout": "page_layout",

    /**
     * value: "mountain_flag"
     * @const
     */
    "mountain_flag": "mountain_flag",

    /**
     * value: "puzzle"
     * @const
     */
    "puzzle": "puzzle",

    /**
     * value: "presentation"
     * @const
     */
    "presentation": "presentation",

    /**
     * value: "line_and_symbols"
     * @const
     */
    "line_and_symbols": "line_and_symbols",

    /**
     * value: "speed_dial"
     * @const
     */
    "speed_dial": "speed_dial",

    /**
     * value: "ribbon"
     * @const
     */
    "ribbon": "ribbon",

    /**
     * value: "shoe"
     * @const
     */
    "shoe": "shoe",

    /**
     * value: "shopping_basket"
     * @const
     */
    "shopping_basket": "shopping_basket",

    /**
     * value: "map"
     * @const
     */
    "map": "map",

    /**
     * value: "ticket"
     * @const
     */
    "ticket": "ticket",

    /**
     * value: "coins"
     * @const
     */
    "coins": "coins"
};



export default ProjectResponseAllOf;

