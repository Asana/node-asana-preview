/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomFieldResponsePeopleValueInner from './CustomFieldResponsePeopleValueInner';
import JobBaseNewProjectTemplate from './JobBaseNewProjectTemplate';
import PortfolioResponseCurrentStatusUpdate from './PortfolioResponseCurrentStatusUpdate';
import PortfolioResponseCustomFieldSettingsInner from './PortfolioResponseCustomFieldSettingsInner';
import PortfolioResponseCustomFieldsInner from './PortfolioResponseCustomFieldsInner';
import PortfolioResponseWorkspace from './PortfolioResponseWorkspace';

/**
 * The PortfolioResponse model module.
 * @module model/PortfolioResponse
 * @version 1.0.4
 */
class PortfolioResponse {
    /**
     * Constructs a new <code>PortfolioResponse</code>.
     * A generic Asana Resource, containing a globally unique identifier.A generic Asana Resource, containing a globally unique identifier. A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/reference/project-statuses) update. Portfolios have some restrictions on size. Each portfolio has a max of 500 items and, like projects, a max of 20 custom fields.
     * @alias module:model/PortfolioResponse
     */
    constructor() { 
        
        PortfolioResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PortfolioResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PortfolioResponse} obj Optional instance to populate.
     * @return {module:model/PortfolioResponse} The populated <code>PortfolioResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PortfolioResponse();

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = CustomFieldResponsePeopleValueInner.constructFromObject(data['created_by']);
            }
            if (data.hasOwnProperty('custom_field_settings')) {
                obj['custom_field_settings'] = ApiClient.convertToType(data['custom_field_settings'], [PortfolioResponseCustomFieldSettingsInner]);
            }
            if (data.hasOwnProperty('current_status_update')) {
                obj['current_status_update'] = PortfolioResponseCurrentStatusUpdate.constructFromObject(data['current_status_update']);
            }
            if (data.hasOwnProperty('due_on')) {
                obj['due_on'] = ApiClient.convertToType(data['due_on'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [PortfolioResponseCustomFieldsInner]);
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [CustomFieldResponsePeopleValueInner]);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = CustomFieldResponsePeopleValueInner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('start_on')) {
                obj['start_on'] = ApiClient.convertToType(data['start_on'], 'Date');
            }
            if (data.hasOwnProperty('workspace')) {
                obj['workspace'] = PortfolioResponseWorkspace.constructFromObject(data['workspace']);
            }
            if (data.hasOwnProperty('permalink_url')) {
                obj['permalink_url'] = ApiClient.convertToType(data['permalink_url'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('project_templates')) {
                obj['project_templates'] = ApiClient.convertToType(data['project_templates'], [JobBaseNewProjectTemplate]);
            }
        }
        return obj;
    }


}

/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
PortfolioResponse.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
PortfolioResponse.prototype['resource_type'] = undefined;

/**
 * The name of the portfolio.
 * @member {String} name
 */
PortfolioResponse.prototype['name'] = undefined;

/**
 * Color of the portfolio.
 * @member {module:model/PortfolioResponse.ColorEnum} color
 */
PortfolioResponse.prototype['color'] = undefined;

/**
 * The time at which this resource was created.
 * @member {Date} created_at
 */
PortfolioResponse.prototype['created_at'] = undefined;

/**
 * @member {module:model/CustomFieldResponsePeopleValueInner} created_by
 */
PortfolioResponse.prototype['created_by'] = undefined;

/**
 * Array of custom field settings applied to the portfolio.
 * @member {Array.<module:model/PortfolioResponseCustomFieldSettingsInner>} custom_field_settings
 */
PortfolioResponse.prototype['custom_field_settings'] = undefined;

/**
 * @member {module:model/PortfolioResponseCurrentStatusUpdate} current_status_update
 */
PortfolioResponse.prototype['current_status_update'] = undefined;

/**
 * The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
 * @member {Date} due_on
 */
PortfolioResponse.prototype['due_on'] = undefined;

/**
 * Array of Custom Fields.
 * @member {Array.<module:model/PortfolioResponseCustomFieldsInner>} custom_fields
 */
PortfolioResponse.prototype['custom_fields'] = undefined;

/**
 * @member {Array.<module:model/CustomFieldResponsePeopleValueInner>} members
 */
PortfolioResponse.prototype['members'] = undefined;

/**
 * @member {module:model/CustomFieldResponsePeopleValueInner} owner
 */
PortfolioResponse.prototype['owner'] = undefined;

/**
 * The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
 * @member {Date} start_on
 */
PortfolioResponse.prototype['start_on'] = undefined;

/**
 * @member {module:model/PortfolioResponseWorkspace} workspace
 */
PortfolioResponse.prototype['workspace'] = undefined;

/**
 * A url that points directly to the object within Asana.
 * @member {String} permalink_url
 */
PortfolioResponse.prototype['permalink_url'] = undefined;

/**
 * True if the portfolio is public to its workspace members.
 * @member {Boolean} public
 */
PortfolioResponse.prototype['public'] = undefined;

/**
 * Array of project templates that are in the portfolio
 * @member {Array.<module:model/JobBaseNewProjectTemplate>} project_templates
 */
PortfolioResponse.prototype['project_templates'] = undefined;





/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
PortfolioResponse['ColorEnum'] = {

    /**
     * value: "dark-pink"
     * @const
     */
    "dark-pink": "dark-pink",

    /**
     * value: "dark-green"
     * @const
     */
    "dark-green": "dark-green",

    /**
     * value: "dark-blue"
     * @const
     */
    "dark-blue": "dark-blue",

    /**
     * value: "dark-red"
     * @const
     */
    "dark-red": "dark-red",

    /**
     * value: "dark-teal"
     * @const
     */
    "dark-teal": "dark-teal",

    /**
     * value: "dark-brown"
     * @const
     */
    "dark-brown": "dark-brown",

    /**
     * value: "dark-orange"
     * @const
     */
    "dark-orange": "dark-orange",

    /**
     * value: "dark-purple"
     * @const
     */
    "dark-purple": "dark-purple",

    /**
     * value: "dark-warm-gray"
     * @const
     */
    "dark-warm-gray": "dark-warm-gray",

    /**
     * value: "light-pink"
     * @const
     */
    "light-pink": "light-pink",

    /**
     * value: "light-green"
     * @const
     */
    "light-green": "light-green",

    /**
     * value: "light-blue"
     * @const
     */
    "light-blue": "light-blue",

    /**
     * value: "light-red"
     * @const
     */
    "light-red": "light-red",

    /**
     * value: "light-teal"
     * @const
     */
    "light-teal": "light-teal",

    /**
     * value: "light-brown"
     * @const
     */
    "light-brown": "light-brown",

    /**
     * value: "light-orange"
     * @const
     */
    "light-orange": "light-orange",

    /**
     * value: "light-purple"
     * @const
     */
    "light-purple": "light-purple",

    /**
     * value: "light-warm-gray"
     * @const
     */
    "light-warm-gray": "light-warm-gray"
};



export default PortfolioResponse;

