/**
 * Asana
 * This is the interface for interacting with the Asana platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetEvents401Response from '../model/GetEvents401Response';
import GetEvents403Response from '../model/GetEvents403Response';
import GetEvents404Response from '../model/GetEvents404Response';
import GetEvents500Response from '../model/GetEvents500Response';
import GetTask200Response from '../model/GetTask200Response';
import GetTasksForProject200Response from '../model/GetTasksForProject200Response';

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0.1
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSubtasksForTask operation.
     * @callback module:api/TasksApi~getSubtasksForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subtasks from a task
     * Returns a compact representation of all of the subtasks of a task.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optFields Defines fields to return.  Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.  The gid of included objects will always be returned, regardless of the field options.
     * @param {Boolean} opts.optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Number} opts.limit The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token.  An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.  'Note: You can only pass in an offset that was returned to you via a previously paginated request.
     * @param {module:api/TasksApi~getSubtasksForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getSubtasksForTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getSubtasksForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'opt_pretty': opts['optPretty'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personal_access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/subtasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTask operation.
     * @callback module:api/TasksApi~getTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTask200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a task
     * Returns the complete task record for a single task.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optFields Defines fields to return.  Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.  The gid of included objects will always be returned, regardless of the field options.
     * @param {Boolean} opts.optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {module:api/TasksApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTask200Response}
     */
    getTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'opt_pretty': opts['optPretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personal_access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTask200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/TasksApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple tasks
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/reference/searchtasksforworkspace).
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.optFields Defines fields to return.  Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.  The gid of included objects will always be returned, regardless of the field options.
     * @param {Boolean} opts.optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Number} opts.limit The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token.  An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.  'Note: You can only pass in an offset that was returned to you via a previously paginated request.
     * @param {String} opts.assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified.  *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
     * @param {String} opts.project The project to filter tasks on.
     * @param {String} opts.section The section to filter tasks on.
     * @param {String} opts.workspace The workspace to filter tasks on.  *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
     * @param {Date} opts.completedSince Only return tasks that are either incomplete or that have been completed since this time.
     * @param {Date} opts.modifiedSince Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
     * @param {module:api/TasksApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'opt_pretty': opts['optPretty'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'assignee': opts['assignee'],
        'project': opts['project'],
        'section': opts['section'],
        'workspace': opts['workspace'],
        'completed_since': opts['completedSince'],
        'modified_since': opts['modifiedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personal_access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksForProject operation.
     * @callback module:api/TasksApi~getTasksForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks from a project
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
     * @param {Array.<String>} opts.optFields Defines fields to return.  Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.  The gid of included objects will always be returned, regardless of the field options.
     * @param {Boolean} opts.optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Number} opts.limit The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token.  An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.  'Note: You can only pass in an offset that was returned to you via a previously paginated request.
     * @param {module:api/TasksApi~getTasksForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasksForProject(projectGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling getTasksForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'completed_since': opts['completedSince'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'opt_pretty': opts['optPretty'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personal_access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
