/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumOption from './EnumOption';
import EnumOptionRequestAllOf from './EnumOptionRequestAllOf';

/**
 * The EnumOptionRequest model module.
 * @module model/EnumOptionRequest
 * @version 1.0.3
 */
class EnumOptionRequest {
    /**
     * Constructs a new <code>EnumOptionRequest</code>.
     * @alias module:model/EnumOptionRequest
     * @implements module:model/EnumOption
     * @implements module:model/EnumOptionRequestAllOf
     */
    constructor() { 
        EnumOption.initialize(this);EnumOptionRequestAllOf.initialize(this);
        EnumOptionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnumOptionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnumOptionRequest} obj Optional instance to populate.
     * @return {module:model/EnumOptionRequest} The populated <code>EnumOptionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnumOptionRequest();
            EnumOption.constructFromObject(data, obj);
            EnumOptionRequestAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('insert_before')) {
                obj['insert_before'] = ApiClient.convertToType(data['insert_before'], 'String');
            }
            if (data.hasOwnProperty('insert_after')) {
                obj['insert_after'] = ApiClient.convertToType(data['insert_after'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
EnumOptionRequest.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
EnumOptionRequest.prototype['resource_type'] = undefined;

/**
 * The name of the enum option.
 * @member {String} name
 */
EnumOptionRequest.prototype['name'] = undefined;

/**
 * Whether or not the enum option is a selectable value for the custom field.
 * @member {Boolean} enabled
 */
EnumOptionRequest.prototype['enabled'] = undefined;

/**
 * The color of the enum option. Defaults to ‘none’.
 * @member {String} color
 */
EnumOptionRequest.prototype['color'] = undefined;

/**
 * An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
 * @member {String} insert_before
 */
EnumOptionRequest.prototype['insert_before'] = undefined;

/**
 * An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
 * @member {String} insert_after
 */
EnumOptionRequest.prototype['insert_after'] = undefined;


// Implement EnumOption interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
EnumOption.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
EnumOption.prototype['resource_type'] = undefined;
/**
 * The name of the enum option.
 * @member {String} name
 */
EnumOption.prototype['name'] = undefined;
/**
 * Whether or not the enum option is a selectable value for the custom field.
 * @member {Boolean} enabled
 */
EnumOption.prototype['enabled'] = undefined;
/**
 * The color of the enum option. Defaults to ‘none’.
 * @member {String} color
 */
EnumOption.prototype['color'] = undefined;
// Implement EnumOptionRequestAllOf interface:
/**
 * An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
 * @member {String} insert_before
 */
EnumOptionRequestAllOf.prototype['insert_before'] = undefined;
/**
 * An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
 * @member {String} insert_after
 */
EnumOptionRequestAllOf.prototype['insert_after'] = undefined;




export default EnumOptionRequest;

