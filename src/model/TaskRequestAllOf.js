/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskRequestAllOf model module.
 * @module model/TaskRequestAllOf
 * @version 1.0.3
 */
class TaskRequestAllOf {
    /**
     * Constructs a new <code>TaskRequestAllOf</code>.
     * @alias module:model/TaskRequestAllOf
     */
    constructor() { 
        
        TaskRequestAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskRequestAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskRequestAllOf} obj Optional instance to populate.
     * @return {module:model/TaskRequestAllOf} The populated <code>TaskRequestAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskRequestAllOf();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
            }
            if (data.hasOwnProperty('assignee_section')) {
                obj['assignee_section'] = ApiClient.convertToType(data['assignee_section'], 'String');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], {'String': 'String'});
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = ApiClient.convertToType(data['followers'], ['String']);
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = ApiClient.convertToType(data['projects'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('workspace')) {
                obj['workspace'] = ApiClient.convertToType(data['workspace'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Gid of a user.
 * @member {String} assignee
 */
TaskRequestAllOf.prototype['assignee'] = undefined;

/**
 * The *assignee section* is a subdivision of a project that groups tasks together in the assignee's \"My Tasks\" list. It can either be a header above a list of tasks in a list view or a column in a board view of \"My Tasks.\" The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's \"My Tasks\" list.
 * @member {String} assignee_section
 */
TaskRequestAllOf.prototype['assignee_section'] = undefined;

/**
 * An object where each key is a Custom Field GID and each value is an enum GID, string, number, object, or array.
 * @member {Object.<String, String>} custom_fields
 */
TaskRequestAllOf.prototype['custom_fields'] = undefined;

/**
 * *Create-Only* An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
 * @member {Array.<String>} followers
 */
TaskRequestAllOf.prototype['followers'] = undefined;

/**
 * Gid of a task.
 * @member {String} parent
 */
TaskRequestAllOf.prototype['parent'] = undefined;

/**
 * *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
 * @member {Array.<String>} projects
 */
TaskRequestAllOf.prototype['projects'] = undefined;

/**
 * *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
 * @member {Array.<String>} tags
 */
TaskRequestAllOf.prototype['tags'] = undefined;

/**
 * Gid of a workspace.
 * @member {String} workspace
 */
TaskRequestAllOf.prototype['workspace'] = undefined;






export default TaskRequestAllOf;

