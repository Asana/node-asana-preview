/**
 * Asana
 * This is the interface for interacting with the Asana platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskBaseAllOfExternal from './TaskBaseAllOfExternal';

/**
 * The TaskBaseAllOf model module.
 * @module model/TaskBaseAllOf
 * @version 1.0.0
 */
class TaskBaseAllOf {
    /**
     * Constructs a new <code>TaskBaseAllOf</code>.
     * @alias module:model/TaskBaseAllOf
     */
    constructor() { 
        
        TaskBaseAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskBaseAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskBaseAllOf} obj Optional instance to populate.
     * @return {module:model/TaskBaseAllOf} The populated <code>TaskBaseAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskBaseAllOf();

            if (data.hasOwnProperty('approval_status')) {
                obj['approval_status'] = ApiClient.convertToType(data['approval_status'], 'String');
            }
            if (data.hasOwnProperty('assignee_status')) {
                obj['assignee_status'] = ApiClient.convertToType(data['assignee_status'], 'String');
            }
            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Boolean');
            }
            if (data.hasOwnProperty('due_at')) {
                obj['due_at'] = ApiClient.convertToType(data['due_at'], 'Date');
            }
            if (data.hasOwnProperty('due_on')) {
                obj['due_on'] = ApiClient.convertToType(data['due_on'], 'Date');
            }
            if (data.hasOwnProperty('external')) {
                obj['external'] = TaskBaseAllOfExternal.constructFromObject(data['external']);
            }
            if (data.hasOwnProperty('html_notes')) {
                obj['html_notes'] = ApiClient.convertToType(data['html_notes'], 'String');
            }
            if (data.hasOwnProperty('liked')) {
                obj['liked'] = ApiClient.convertToType(data['liked'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('start_at')) {
                obj['start_at'] = ApiClient.convertToType(data['start_at'], 'Date');
            }
            if (data.hasOwnProperty('start_on')) {
                obj['start_on'] = ApiClient.convertToType(data['start_on'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
 * @member {module:model/TaskBaseAllOf.ApprovalStatusEnum} approval_status
 */
TaskBaseAllOf.prototype['approval_status'] = undefined;

/**
 * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.
 * @member {module:model/TaskBaseAllOf.AssigneeStatusEnum} assignee_status
 */
TaskBaseAllOf.prototype['assignee_status'] = undefined;

/**
 * True if the task is currently marked complete, false if not.
 * @member {Boolean} completed
 */
TaskBaseAllOf.prototype['completed'] = undefined;

/**
 * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
 * @member {Date} due_at
 */
TaskBaseAllOf.prototype['due_at'] = undefined;

/**
 * The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
 * @member {Date} due_on
 */
TaskBaseAllOf.prototype['due_on'] = undefined;

/**
 * @member {module:model/TaskBaseAllOfExternal} external
 */
TaskBaseAllOf.prototype['external'] = undefined;

/**
 * [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.
 * @member {String} html_notes
 */
TaskBaseAllOf.prototype['html_notes'] = undefined;

/**
 * True if the task is liked by the authorized user, false if not.
 * @member {Boolean} liked
 */
TaskBaseAllOf.prototype['liked'] = undefined;

/**
 * Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
 * @member {String} name
 */
TaskBaseAllOf.prototype['name'] = undefined;

/**
 * Free-form textual information associated with the task (i.e. its description).
 * @member {String} notes
 */
TaskBaseAllOf.prototype['notes'] = undefined;

/**
 * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
 * @member {Date} start_at
 */
TaskBaseAllOf.prototype['start_at'] = undefined;

/**
 * The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
 * @member {Date} start_on
 */
TaskBaseAllOf.prototype['start_on'] = undefined;





/**
 * Allowed values for the <code>approval_status</code> property.
 * @enum {String}
 * @readonly
 */
TaskBaseAllOf['ApprovalStatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "changes_requested"
     * @const
     */
    "changes_requested": "changes_requested"
};


/**
 * Allowed values for the <code>assignee_status</code> property.
 * @enum {String}
 * @readonly
 */
TaskBaseAllOf['AssigneeStatusEnum'] = {

    /**
     * value: "today"
     * @const
     */
    "today": "today",

    /**
     * value: "upcoming"
     * @const
     */
    "upcoming": "upcoming",

    /**
     * value: "later"
     * @const
     */
    "later": "later",

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "inbox"
     * @const
     */
    "inbox": "inbox"
};



export default TaskBaseAllOf;

