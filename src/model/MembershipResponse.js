/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoalCompact from './GoalCompact';
import GoalMembershipCompact from './GoalMembershipCompact';
import MemberCompact from './MemberCompact';
import PortfolioCompact from './PortfolioCompact';
import PortfolioMembershipCompact from './PortfolioMembershipCompact';
import ProjectCompact from './ProjectCompact';
import ProjectMembershipResponse from './ProjectMembershipResponse';
import TeamCompact from './TeamCompact';
import TeamMembershipCompact from './TeamMembershipCompact';
import UserCompact from './UserCompact';
import UserTaskListCompact from './UserTaskListCompact';
import WorkspaceCompact from './WorkspaceCompact';
import WorkspaceMembershipResponse from './WorkspaceMembershipResponse';
import WorkspaceMembershipResponseAllOfVacationDates from './WorkspaceMembershipResponseAllOfVacationDates';

/**
 * The MembershipResponse model module.
 * @module model/MembershipResponse
 * @version 1.0.3
 */
class MembershipResponse {
    /**
     * Constructs a new <code>MembershipResponse</code>.
     * @alias module:model/MembershipResponse
     * @implements module:model/ProjectMembershipResponse
     * @implements module:model/PortfolioMembershipCompact
     * @implements module:model/TeamMembershipCompact
     * @implements module:model/GoalMembershipCompact
     * @implements module:model/WorkspaceMembershipResponse
     */
    constructor() { 
        ProjectMembershipResponse.initialize(this);PortfolioMembershipCompact.initialize(this);TeamMembershipCompact.initialize(this);GoalMembershipCompact.initialize(this);WorkspaceMembershipResponse.initialize(this);
        MembershipResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MembershipResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MembershipResponse} obj Optional instance to populate.
     * @return {module:model/MembershipResponse} The populated <code>MembershipResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MembershipResponse();
            ProjectMembershipResponse.constructFromObject(data, obj);
            PortfolioMembershipCompact.constructFromObject(data, obj);
            TeamMembershipCompact.constructFromObject(data, obj);
            GoalMembershipCompact.constructFromObject(data, obj);
            WorkspaceMembershipResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserCompact.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ProjectCompact.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = MemberCompact.constructFromObject(data['member']);
            }
            if (data.hasOwnProperty('write_access')) {
                obj['write_access'] = ApiClient.convertToType(data['write_access'], 'String');
            }
            if (data.hasOwnProperty('portfolio')) {
                obj['portfolio'] = PortfolioCompact.constructFromObject(data['portfolio']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = TeamCompact.constructFromObject(data['team']);
            }
            if (data.hasOwnProperty('is_guest')) {
                obj['is_guest'] = ApiClient.convertToType(data['is_guest'], 'Boolean');
            }
            if (data.hasOwnProperty('is_limited_access')) {
                obj['is_limited_access'] = ApiClient.convertToType(data['is_limited_access'], 'Boolean');
            }
            if (data.hasOwnProperty('is_admin')) {
                obj['is_admin'] = ApiClient.convertToType(data['is_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('goal')) {
                obj['goal'] = GoalCompact.constructFromObject(data['goal']);
            }
            if (data.hasOwnProperty('is_commenter')) {
                obj['is_commenter'] = ApiClient.convertToType(data['is_commenter'], 'Boolean');
            }
            if (data.hasOwnProperty('is_editor')) {
                obj['is_editor'] = ApiClient.convertToType(data['is_editor'], 'Boolean');
            }
            if (data.hasOwnProperty('workspace')) {
                obj['workspace'] = WorkspaceCompact.constructFromObject(data['workspace']);
            }
            if (data.hasOwnProperty('user_task_list')) {
                obj['user_task_list'] = UserTaskListCompact.constructFromObject(data['user_task_list']);
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('vacation_dates')) {
                obj['vacation_dates'] = WorkspaceMembershipResponseAllOfVacationDates.constructFromObject(data['vacation_dates']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
MembershipResponse.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
MembershipResponse.prototype['resource_type'] = undefined;

/**
 * @member {module:model/UserCompact} user
 */
MembershipResponse.prototype['user'] = undefined;

/**
 * @member {module:model/ProjectCompact} project
 */
MembershipResponse.prototype['project'] = undefined;

/**
 * @member {module:model/MemberCompact} member
 */
MembershipResponse.prototype['member'] = undefined;

/**
 * Whether the member has full access, edit access, or comment-only access to the project.
 * @member {module:model/MembershipResponse.WriteAccessEnum} write_access
 */
MembershipResponse.prototype['write_access'] = undefined;

/**
 * @member {module:model/PortfolioCompact} portfolio
 */
MembershipResponse.prototype['portfolio'] = undefined;

/**
 * @member {module:model/TeamCompact} team
 */
MembershipResponse.prototype['team'] = undefined;

/**
 * Reflects if this user is a guest of the workspace.
 * @member {Boolean} is_guest
 */
MembershipResponse.prototype['is_guest'] = undefined;

/**
 * Describes if the user has limited access to the team.
 * @member {Boolean} is_limited_access
 */
MembershipResponse.prototype['is_limited_access'] = undefined;

/**
 * Reflects if this user is an admin of the workspace.
 * @member {Boolean} is_admin
 */
MembershipResponse.prototype['is_admin'] = undefined;

/**
 * @member {module:model/GoalCompact} goal
 */
MembershipResponse.prototype['goal'] = undefined;

/**
 * Describes if the member is comment only in goal.
 * @member {Boolean} is_commenter
 */
MembershipResponse.prototype['is_commenter'] = undefined;

/**
 * Describes if the member is editor in goal.
 * @member {Boolean} is_editor
 */
MembershipResponse.prototype['is_editor'] = undefined;

/**
 * @member {module:model/WorkspaceCompact} workspace
 */
MembershipResponse.prototype['workspace'] = undefined;

/**
 * @member {module:model/UserTaskListCompact} user_task_list
 */
MembershipResponse.prototype['user_task_list'] = undefined;

/**
 * Reflects if this user still a member of the workspace.
 * @member {Boolean} is_active
 */
MembershipResponse.prototype['is_active'] = undefined;

/**
 * @member {module:model/WorkspaceMembershipResponseAllOfVacationDates} vacation_dates
 */
MembershipResponse.prototype['vacation_dates'] = undefined;

/**
 * The time at which this resource was created.
 * @member {Date} created_at
 */
MembershipResponse.prototype['created_at'] = undefined;


// Implement ProjectMembershipResponse interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
ProjectMembershipResponse.prototype['gid'] = undefined;
/**
 * Type of the membership.
 * @member {String} resource_type
 */
ProjectMembershipResponse.prototype['resource_type'] = undefined;
/**
 * @member {module:model/UserCompact} user
 */
ProjectMembershipResponse.prototype['user'] = undefined;
/**
 * @member {module:model/ProjectCompact} project
 */
ProjectMembershipResponse.prototype['project'] = undefined;
/**
 * @member {module:model/MemberCompact} member
 */
ProjectMembershipResponse.prototype['member'] = undefined;
/**
 * Whether the member has full access, edit access, or comment-only access to the project.
 * @member {module:model/ProjectMembershipResponse.WriteAccessEnum} write_access
 */
ProjectMembershipResponse.prototype['write_access'] = undefined;
// Implement PortfolioMembershipCompact interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
PortfolioMembershipCompact.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
PortfolioMembershipCompact.prototype['resource_type'] = undefined;
/**
 * @member {module:model/PortfolioCompact} portfolio
 */
PortfolioMembershipCompact.prototype['portfolio'] = undefined;
/**
 * @member {module:model/UserCompact} user
 */
PortfolioMembershipCompact.prototype['user'] = undefined;
// Implement TeamMembershipCompact interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
TeamMembershipCompact.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
TeamMembershipCompact.prototype['resource_type'] = undefined;
/**
 * @member {module:model/UserCompact} user
 */
TeamMembershipCompact.prototype['user'] = undefined;
/**
 * @member {module:model/TeamCompact} team
 */
TeamMembershipCompact.prototype['team'] = undefined;
/**
 * Describes if the user is a guest in the team.
 * @member {Boolean} is_guest
 */
TeamMembershipCompact.prototype['is_guest'] = undefined;
/**
 * Describes if the user has limited access to the team.
 * @member {Boolean} is_limited_access
 */
TeamMembershipCompact.prototype['is_limited_access'] = undefined;
/**
 * Describes if the user is a team admin.
 * @member {Boolean} is_admin
 */
TeamMembershipCompact.prototype['is_admin'] = undefined;
// Implement GoalMembershipCompact interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
GoalMembershipCompact.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
GoalMembershipCompact.prototype['resource_type'] = undefined;
/**
 * @member {module:model/MemberCompact} member
 */
GoalMembershipCompact.prototype['member'] = undefined;
/**
 * @member {module:model/GoalCompact} goal
 */
GoalMembershipCompact.prototype['goal'] = undefined;
/**
 * Describes if the member is comment only in goal.
 * @member {Boolean} is_commenter
 */
GoalMembershipCompact.prototype['is_commenter'] = undefined;
/**
 * Describes if the member is editor in goal.
 * @member {Boolean} is_editor
 */
GoalMembershipCompact.prototype['is_editor'] = undefined;
// Implement WorkspaceMembershipResponse interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
WorkspaceMembershipResponse.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
WorkspaceMembershipResponse.prototype['resource_type'] = undefined;
/**
 * @member {module:model/UserCompact} user
 */
WorkspaceMembershipResponse.prototype['user'] = undefined;
/**
 * @member {module:model/WorkspaceCompact} workspace
 */
WorkspaceMembershipResponse.prototype['workspace'] = undefined;
/**
 * @member {module:model/UserTaskListCompact} user_task_list
 */
WorkspaceMembershipResponse.prototype['user_task_list'] = undefined;
/**
 * Reflects if this user still a member of the workspace.
 * @member {Boolean} is_active
 */
WorkspaceMembershipResponse.prototype['is_active'] = undefined;
/**
 * Reflects if this user is an admin of the workspace.
 * @member {Boolean} is_admin
 */
WorkspaceMembershipResponse.prototype['is_admin'] = undefined;
/**
 * Reflects if this user is a guest of the workspace.
 * @member {Boolean} is_guest
 */
WorkspaceMembershipResponse.prototype['is_guest'] = undefined;
/**
 * @member {module:model/WorkspaceMembershipResponseAllOfVacationDates} vacation_dates
 */
WorkspaceMembershipResponse.prototype['vacation_dates'] = undefined;
/**
 * The time at which this resource was created.
 * @member {Date} created_at
 */
WorkspaceMembershipResponse.prototype['created_at'] = undefined;



/**
 * Allowed values for the <code>write_access</code> property.
 * @enum {String}
 * @readonly
 */
MembershipResponse['WriteAccessEnum'] = {

    /**
     * value: "full_write"
     * @const
     */
    "full_write": "full_write",

    /**
     * value: "editor"
     * @const
     */
    "editor": "editor",

    /**
     * value: "comment_only"
     * @const
     */
    "comment_only": "comment_only"
};



export default MembershipResponse;

